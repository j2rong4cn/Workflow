From 9e24830ccb575e4981b1715dd3971bf3faf19938 Mon Sep 17 00:00:00 2001
From: wxt1221 <3264117476@qq.com>
Date: Fri, 26 Jan 2024 10:53:36 +0800
Subject: [PATCH] support umount modules

---
 kernel/core_hook.c | 52 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/kernel/core_hook.c b/kernel/core_hook.c
index 9c863660dd29..04cea2e89017 100644
--- a/kernel/core_hook.c
+++ b/kernel/core_hook.c
@@ -29,6 +29,53 @@
 #include "selinux/selinux.h"
 #include "uid_observer.h"
 #include "kernel_compat.h"
+#include "../../fs/mount.h"
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 9, 0)
+
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 4, 0)
+extern inline bool may_mount(void);
+extern inline int check_mnt(struct mount *mnt);
+extern void mntput_no_expire(struct mount *mnt);
+extern int do_umount(struct mount *mnt, int flags);
+static inline bool ksu_path_mounted(const struct path *path)
+	{
+		return path->mnt->mnt_root == path->dentry;
+	}
+	static int ksu_can_umount(const struct path *path, int flags)
+	{
+		struct mount *mnt = real_mount(path->mnt);
+
+		if (!may_mount())
+			return -EPERM;
+		if (!ksu_path_mounted(path))
+			return -EINVAL;
+		if (!check_mnt(mnt))
+			return -EINVAL;
+		if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
+			return -EINVAL;
+		if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
+			return -EPERM;
+		return 0;
+	}
+	int ksu_path_umount(struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+	int ret;
+
+	ret = ksu_can_umount(path, flags);
+	if (!ret)
+		ret = do_umount(mnt, flags);
+
+	/* we mustn't call path_put() as that would clear mnt_expiry_mark */
+	dput(path->dentry);
+	mntput_no_expire(mnt);
+	return ret;
+}
+#else
+	//not tested
+#endif
+
 
 static bool ksu_module_mounted = false;
 
@@ -501,6 +548,11 @@ static void ksu_umount_mnt(struct path *path, int flags)
 	if (err) {
 		pr_info("umount %s failed: %d\n", path->dentry->d_iname, err);
 	}
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 4, 0)
+	int err = ksu_path_umount(path, flags);
+	if (err) {
+		pr_info("umount %s failed: %d\n", path->dentry->d_iname, err);
+	}
 #else
 	// TODO: umount for non GKI kernel
 #endif
