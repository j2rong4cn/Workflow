name: Build kernel for dipper
env:
  arch: arm64
  kernel_repository: j2rong4cn/android_kernel_xiaomi_sdm845
  kernel_branch: 14
  kernel_patch: |
    allow-init-exec-ksud-under-nosuid.patch
    support-umount-modules-kernel.patch
    fix-cgroup.patch
  kernelsu_patch: |
  defconfig: vendor/xiaomi/mi845_defconfig vendor/xiaomi/dipper.config
  extra_config: |
    CONFIG_TCP_CONG_ADVANCED=y
    CONFIG_TCP_CONG_CUBIC=y
    CONFIG_TCP_CONG_BBR=y
    CONFIG_TCP_CONG_WESTWOOD=y
    CONFIG_DEFAULT_WESTWOOD=y

    CONFIG_CRYPTO_ZSTD=y
    CONFIG_ZRAM_DEFAULT_COMP_ALGORITHM="zstd"

    CONFIG_LOCALVERSION="-ksu-docker"
    #KernelSU
    CONFIG_KPROBES=y
    CONFIG_HAVE_KPROBES=y
    CONFIG_KPROBE_EVENTS=y

    #docker
    # CONFIG_ANDROID_PARANOID_NETWORK is not set
    CONFIG_IP_VS=y
    #Generally Necessary
    CONFIG_PID_NS=y
    CONFIG_IPC_NS=y
    CONFIG_UTS_NS=y
    CONFIG_CGROUP_DEVICE=y
    CONFIG_VETH=y
    CONFIG_BRIDGE_NETFILTER=y
    CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
    CONFIG_NETFILTER_XT_MATCH_IPVS=y
    CONFIG_POSIX_MQUEUE=y

    CONFIG_HUGETLBFS=y
    #Optional Features
    CONFIG_IP_VS_NFCT=y
    CONFIG_IP_VS_PROTO_TCP=y
    CONFIG_IP_VS_PROTO_UDP=y
    CONFIG_IP_VS_RR=y
    
    CONFIG_USER_NS=y
    CONFIG_CGROUP_PIDS=y
    CONFIG_CFQ_GROUP_IOSCHED=y
    CONFIG_BLK_CGROUP=y
    CONFIG_BLK_DEV_THROTTLING=y
    CONFIG_CGROUP_PERF=y
    CONFIG_CGROUP_HUGETLB=y
    CONFIG_NET_CLS_CGROUP=y
    CONFIG_CGROUP_NET_PRIO=y
    CONFIG_CFS_BANDWIDTH=y
    CONFIG_SECURITY_APPARMOR=y
    CONFIG_EXT4_FS_POSIX_ACL=y

    CONFIG_VLAN_8021Q=y
    CONFIG_NET_L3_MASTER_DEV=y
    #Network Drivers
    CONFIG_VXLAN=y
    CONFIG_BRIDGE_VLAN_FILTERING=y
    CONFIG_IPVLAN=y
    CONFIG_MACVLAN=y

    #Storage Drivers
    CONFIG_BTRFS_FS=y
    CONFIG_BTRFS_FS_POSIX_ACL=y

on:
  workflow_dispatch:
    inputs:
      KSUV:
        description: "KernelSU Version"
        type: string
        default: "-"

jobs:
  build:
    name: "KSUV: ${{ inputs.KSUV }}"
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
    - name: Setup swap
      uses: pierotofy/set-swap-space@v1.0
      with:
        swap-size-gb: 10

    - name: Download Kernel source
      uses: actions/checkout@v4
      with:
        repository: ${{ env.kernel_repository }}
        ref: ${{ env.kernel_branch }}

    - name: Setup KernelSU
      run: |
        rm -rf KernelSU
        rm -rf drivers/kernelsu
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s '${{ inputs.KSUV }}'

    - name: Retrieve information
      run: |
        sudo apt update
        sudo timedatectl set-timezone Asia/Shanghai && date
        echo VERSION=$(date "+%y%m%d_%H%M")-$(git rev-parse HEAD | head -c 7) | tee -a $GITHUB_ENV
        BRANCH=$(git branch --show-current)
        echo BRANCH=$BRANCH | tee -a $GITHUB_ENV
        echo CCACHE_KEY=$(basename ${GITHUB_WORKFLOW_REF%@*})-$BRANCH | tee -a $GITHUB_ENV
        [ -n "${{ secrets.SOURCE_BOOT_IMAGE }}" ] && echo BUILD_BOOT_IMG=true | tee -a $GITHUB_ENV

    - name: Checkout this repo
      uses: actions/checkout@v4
      with:
        path: this-repo

    - name: Apply kernel patch
      run: |
        while read -r line; do
            if [ -z "$line" ] || [[ "$line" == "#"* ]]; then
                continue
            fi
            echo "Applying kernel patch: $line"
            git apply "this-repo/patches/$line"
        done <<<"$kernel_patch"

    - name: Apply KernelSU patch
      run: |
        while read -r line; do
            if [ -z "$line" ] || [[ "$line" == "#"* ]]; then
                continue
            fi
            echo "Applying KernelSU patch: $line"
            git apply -p2 --directory KernelSU/kernel "this-repo/patches/$line"
        done <<<"$kernelsu_patch"

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        key: ${{ env.CCACHE_KEY }}
        max-size: 2G

    - name: Restore toolchains from cache
      uses: actions/cache/restore@v4
      with:
        path: toolchains
        key: toolchains

    - name: Check & Download Clang-aosp
      run: |
        [ -d toolchains/bin ] || (
          mkdir -p toolchains
          wget -qO - https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main-kernel-build-2023/clang-r487747c.tar.gz | tar -zxvC toolchains
          [ -d toolchains/bin ] && echo IS_SAVE_TOOLCHAINS=true | tee -a $GITHUB_ENV
        )
        [ $? -eq 0 ] && echo ${{ github.workspace }}/toolchains/bin | tee -a $GITHUB_PATH

    - name: Check & Download Gcc-aosp
      run: |
        [ -d toolchains/gcc-64 ] || (
          mkdir -p toolchains/gcc-64
          wget -qO - https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz | tar -zxvC toolchains/gcc-64
          [ -d toolchains/gcc-64/bin ] && echo IS_SAVE_TOOLCHAINS=true | tee -a $GITHUB_ENV
        )
        [ $? -eq 0 ] && echo "GCC_64=CROSS_COMPILE=${{ github.workspace }}/toolchains/gcc-64/bin/aarch64-linux-android-" | tee -a $GITHUB_ENV

        [ -d toolchains/gcc-32 ] || (
          mkdir -p toolchains/gcc-32
          wget -qO - https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz | tar -zxvC toolchains/gcc-32
          [ -d toolchains/gcc-32/bin ] && echo IS_SAVE_TOOLCHAINS=true | tee -a $GITHUB_ENV
        )
        [ $? -eq 0 ] && echo "GCC_32=CROSS_COMPILE_ARM32=${{ github.workspace }}/toolchains/gcc-32/bin/arm-linux-androideabi-" | tee -a $GITHUB_ENV

    - name: Build kernel
      env:
        CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
        CCACHE_NOHASHDIR: "true"
        CCACHE_HARDLINK: "true"
      run: |
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)

        echo "$extra_config" | tee arch/${{ env.arch }}/configs/extra.config

        make O=out ARCH=${{ env.arch }} ${{ env.defconfig }} extra.config && \
        make O=out ARCH=${{ env.arch }} -j $(nproc --all) CC="ccache clang" \
          ${{ env.GCC_64 }} ${{ env.GCC_32 }} \
          LLVM=1 LLVM_IAS=1 CLANG_TRIPLE=aarch64-linux-gnu-

    - name: Check output files
      run: |
        ls out/arch/${{ env.arch }}/boot/Image.gz-dtb && {
          mkdir outputs
          cp out/arch/${{ env.arch }}/boot/Image.gz-dtb outputs/
          cp .config outputs/ 2>/dev/null || cp out/.config outputs/ 2>/dev/null || echo "Cannot find .config"
          echo CHECK_FILE_IS_OK=true | tee -a $GITHUB_ENV
        }

    - name: Build boot image
      if: env.CHECK_FILE_IS_OK == 'true' && env.BUILD_BOOT_IMG == 'true'
      run: |
        wget -qO boot-source.img ${{ secrets.SOURCE_BOOT_IMAGE }}
        if [[ $? -eq 0 && -f boot-source.img ]]; then
          git clone --recursive --depth=1 -j $(nproc --all) https://android.googlesource.com/platform/system/tools/mkbootimg mkbootimg_tools -b main-kernel-build-2023 && {
            FORMAT_MKBOOTING=$(mkbootimg_tools/unpack_bootimg.py --boot_img boot-source.img --format mkbootimg --out img_out)
            mkbootimg_tools/unpack_bootimg.py --boot_img boot-source.img --out img_out && \
              cp outputs/Image.gz-dtb img_out/kernel && \
              eval mkbootimg_tools/mkbootimg.py $FORMAT_MKBOOTING -o outputs/boot.img
          }
        fi

    - name: Upload output files
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dipper-kernel-${{ env.BRANCH }}-${{ env.VERSION }}
        path: |
          outputs/

    - name: Delete old cache
      if: false
      env:
        GH_TOKEN: ${{ github.token }}
      continue-on-error: true
      run: |
        gh extension install actions/gh-actions-cache
        cacheKeysForPR=$(gh actions-cache list -L 100 -R ${{ github.repository }} | cut -f 1)
        if [ -n "$cacheKeysForPR" ]; then
          for cacheKey in $cacheKeysForPR; do
            [ -n "${cacheKey##ccache-${{ env.CCACHE_KEY }}*}" ] || gh actions-cache delete $cacheKey -R ${{ github.repository }} --confirm
          done
        fi

    - name: Save toolchains to cache
      if: ${{ env.IS_SAVE_TOOLCHAINS == 'true' && !cancelled() }}
      continue-on-error: true
      uses: actions/cache/save@v4
      with:
        path: toolchains
        key: toolchains
